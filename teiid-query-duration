#!/usr/bin/python
# -*- coding: utf-8 -*-

"""A command line utility for timing user command query and data source comand query"""

import argparse
import sys
import re
import datetime
from jbosslog import jbosslog

def parse_start_command(entry):
    """
    parse log entry which includes "START (USER|DATA SRC) COMMAND"
    and return date+time, request ID, and SQL (and sourceCommandID)

    >>> import jbosslog
    >>> entry = jbosslog.jbosslogentry("16:46:08,501 DEBUG [org.teiid.COMMAND_LOG] (New I/O worker #6)  START USER COMMAND:     startTime=2014-11-20 16:46:08.501       requestID=CYpbNi6727D+.0       txID=null       sessionID=CYpbNi6727D+  applicationName=JDBC    principal=user@teiid-security   vdbName=test  vdbVersion=1     sql=SELECT\\n"
    ... + "    *\\n"
    ... + "    FROM vvv.USERS\\n\\n"
    ... )
    >>> parsed = parse_start_command(entry)
    >>> print parsed['time']
    2014-11-20 16:46:08.501000
    >>> print parsed['reqid']
    CYpbNi6727D+.0
    >>> print parsed['sql']
    SELECT
        *
        FROM vvv.USERS
    <BLANKLINE>
    """

    match = start_pattern.match(entry.string)
    if match == None:
        return None
    time  = datetime.datetime.strptime(match.group(1), '%Y-%m-%d %H:%M:%S.%f')
    reqid = match.group(2)
    srcid = match.group(3)
    sql   = match.group(4)
    return {'time':time, 'reqid':reqid, 'sql':sql, 'srcid':srcid}

end_pattern = None

def parse_end_command(entry):
    """
    parse log entry which includes "END (USER|SRC) COMMAND"
    and return date+time, request ID (and sourceCommandID)

    >>> import jbosslog
    >>> entry = jbosslog.jbosslogentry("16:46:08,937 DEBUG [org.teiid.COMMAND_LOG] (Worker0_QueryProcessorQueue3)       END USER COMMAND:       endTime=2014-11-20 16:46:08.937 requestID=CYpbNi6727D+.0        txID=null       sessionID=CYpbNi6727D+  principal=user@teiid-security   vdbName=test    vdbVersion=1    finalRowCount=4"
    ... )
    >>> parsed = parse_end_command(entry)
    >>> print parsed['time']
    2014-11-20 16:46:08.937000
    >>> print parsed['reqid']
    CYpbNi6727D+.0
    """

    match = end_pattern.match(entry.string)
    if match == None:
        return None
    time  = datetime.datetime.strptime(match.group(1), '%Y-%m-%d %H:%M:%S.%f')
    reqid = match.group(2)
    srcid = match.group(3)
    return {'time':time, 'reqid':reqid, 'srcid':srcid}

def parse_opts():
    parser = argparse.ArgumentParser(description='A command line utility for timing user command query and data source comand query')
    parser.add_argument('--threshold', '-t', metavar='<sec>',
                        help='Threshold of duration to be shown in second.', type=int,
                        default=0)
    parser.add_argument('--src-command', '-s', action='store_true',
                        help='Show src command duration.')
    # exclusive input stream options
    exclusive = parser.add_mutually_exclusive_group()
    exclusive.add_argument('--splunk', action='store_true',
                           help='Use splunk to feed log.')
    exclusive.add_argument('--local-file', '-f',  metavar='<file>',
                           #type=argparse.FileType('r'),
                           help='Feed local log file. If neither --local-file and --splunk is not specified, teiid-query-duration feeds log from stdin.')
    opts = parser.parse_args(sys.argv[1:])
    return opts


def print_dur(start, end):
    dur = end['time'] - start['time']
    if dur.total_seconds() < opts.threshold:
        return

    print ">>> duration in second = " + str(dur.total_seconds())
    print "request ID = " + start['reqid']
    if start['srcid'] != '':
        print "source cmd ID = " + start['srcid']
    print "start time = " + start['time'].strftime('%Y-%m-%d %H:%M:%S.%f')
    print "end time   = " + end['time'].strftime('%Y-%m-%d %H:%M:%S.%f')
    print "sql        = " + start['sql']
    print


if __name__ == "__main__":
    # a symbolic link named 'testme' to lead doctest
    if __file__ == "./testme":
        start_pattern = re.compile(r".+START USER COMMAND:.+startTime=(\S+ \S+)\s+requestID=(\S+)\s+()\s*.*sql=(.+)\s", re.DOTALL)
        end_pattern = re.compile(r".+END USER COMMAND:.+endTime=(\S+ \S+)\s+requestID=(\S+)\s()")
        import doctest
        doctest.testmod()
        sys.exit(0)

    opts = parse_opts()

    if opts.src_command:
        start_pattern = re.compile(r".+START DATA SRC COMMAND:.+startTime=(\S+ \S+)\s+requestID=(\S+)\s+sourceCommandID=(\S+)\s+.*sql=(.+)", re.DOTALL)
    else:
        start_pattern = re.compile(r".+START USER COMMAND:.+startTime=(\S+ \S+)\s+requestID=(\S+)\s+()\s*.*sql=(.+)\s", re.DOTALL)

    if opts.src_command:
        end_pattern = re.compile(r".+END SRC COMMAND:.+endTime=(\S+ \S+)\s+requestID=(\S+)\s+sourceCommandID=(\S+)\s")
    else:
        end_pattern = re.compile(r".+END USER COMMAND:.+endTime=(\S+ \S+)\s+requestID=(\S+)\s()")

    if opts.splunk:
        from jbosssplunklib import splunkstream
        log = jbosslog(stream=splunkstream())
    elif opts.local_file:
        log = jbosslog(stream=open(opts.local_file,'r'))
    else:
        log = jbosslog()

    commands = []
    while(log.hasnext()):
        next = log.next()

        start = parse_start_command(next)
        if start != None:
            commands.append(start)
            continue

        end = parse_end_command(next)
        if end == None:
            continue

        for start in commands:
            if start['reqid'] != end['reqid']:
                continue

            if opts.src_command and (start['srcid'] != end['srcid']):
                continue

            print_dur(start, end)
            commands.remove(start)
            break
