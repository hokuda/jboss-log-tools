#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import sys
import re
import datetime
from jbosslog import jbosslog

from logging import *
logger = getLogger(__name__)
handler = StreamHandler()
formatter = Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
#logger.setLevel(DEBUG) # uncomment this line if you need debug output

#start_user_command_pattern = re.compile(r".+START USER COMMAND:.+startTime=(\S+ \S+)\s+requestID=(\S+)\s+.*sql=([.\n]+)")
start_user_command_pattern = re.compile(r".+START USER COMMAND:.+startTime=(\S+ \S+)\s+requestID=(\S+)\s+.*sql=(.+)", re.DOTALL)

def parse_start_user_command(entry):
    """
    parse log entry which includes "START USER COMMAND" and return date+time, request ID, and SQL

    >>> import jbosslogutils
    >>> entry = jbosslogentry("16:46:08,501 DEBUG [org.teiid.COMMAND_LOG] (New I/O worker #6)  START USER COMMAND:     startTime=2014-11-20 16:46:08.501       requestID=CYpbNi6727D+.0       txID=null       sessionID=CYpbNi6727D+  applicationName=JDBC    principal=user@teiid-security   vdbName=test  vdbVersion=1     sql=SELECT\\n"
    ... + "    *\\n"
    ... + "    FROM vvv.USERS\\n"
    ... )
    >>> (start, reqid, sql) = parse_start_user_command(entry)
    >>> print start
    2014-11-20 16:46:08.501000
    >>> print reqid
    CYpbNi6727D+.0
    >>> print sql
    SELECT
        *
        FROM vvv.USERS
    <BLANKLINE>
    """

    match = start_user_command_pattern.match(entry.string)
    if match == None:
        return None, None, None
    time = match.group(1)
    reqid = match.group(2)
    sql = match.group(3)
    dt = datetime.datetime.strptime(time, '%Y-%m-%d %H:%M:%S.%f')
    logger.debug("start dt=" + dt.strftime('%Y-%m-%d %H:%M:%S.%f'))
    return dt, reqid, sql

end_user_command_pattern = re.compile(r".+END USER COMMAND:.+endTime=(\S+ \S+)\s+requestID=(\S+)\s")

def parse_end_user_command(entry):
    match = end_user_command_pattern.match(entry.string)
    if match == None:
        return None, None
    time = match.group(1)
    reqid = match.group(2)
    #print "end time=" + time
    dt = datetime.datetime.strptime(time, '%Y-%m-%d %H:%M:%S.%f')
    #print "end dt=" + dt.strftime('%Y-%m-%d %H:%M:%S.%f')
    return dt, reqid

def parse_opts():
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--threshold', '-t', metavar='<sec>',
                        help='Threshold of duration in second', type=int,
                        default=0)
    # exclusive input stream options
    exclusive = parser.add_mutually_exclusive_group()
    exclusive.add_argument('--splunk', action='store_true',
                           help='Use splunk to feed log')
    exclusive.add_argument('--local', metavar='<file>',
                           #type=argparse.FileType('r'),
                           help='Feed local log file')
    opts = parser.parse_args(sys.argv[1:])
    return opts
    

if __name__ == "__main__":
    opts = parse_opts()
    if __file__ == "./test":
        import doctest
        doctest.testmod()
        sys.exit(0)
        
    threshold = opts.threshold

    log = None
    if opts.splunk:
        from jbosssplunklib import splunkstream
        log = jbosslog(stream=splunkstream())
    else:
        log = jbosslog(stream=open(opts.local,'r'))

    running_commands = []
    while(log.hasnext()):
        next = log.next()
        (start, reqid_s, sql) = parse_start_user_command(next)
        if start != None:
            running_commands.append([start, reqid_s, sql])
            logger.debug("start start=" + start.strftime('%Y-%m-%d %H:%M:%S.%f'))
            continue

        (end, reqid_e) = parse_end_user_command(next)

        for (start, reqid_s, sql) in running_commands:
            if reqid_s != reqid_e:
                continue
            duration = end - start
            if duration.total_seconds() < threshold:
                continue
            print ">>> duration in second = " + str(duration.total_seconds())
            print "request ID = " + reqid_s
            print "sql        = " + sql,
            print "start time = " + start.strftime('%Y-%m-%d %H:%M:%S.%f')
            print "end time   = " + end.strftime('%Y-%m-%d %H:%M:%S.%f')
            print
            running_commands.remove([start, reqid_s, sql])
            
